// Importa o m√≥dulo 'crypto' para gerar hashes SHA-256 (Node.js)
const crypto = require('crypto');

/**
 * Fun√ß√£o que simula a minera√ß√£o de um bloco em blockchain (Proof of Work).
 * @param {string} transactions - Dados das transa√ß√µes do bloco.
 * @param {string} previousHash - Hash do bloco anterior (garante a imutabilidade da cadeia).
 * @param {number} difficulty - N√∫mero de zeros requeridos no in√≠cio do hash (dificuldade).
 * @returns {Object} Retorna o nonce encontrado e o hash do bloco.
 */
function mineBlock(transactions, previousHash, difficulty) {
    let nonce = 0; // Inicia o nonce em 0
    const targetPrefix = '0'.repeat(difficulty); // Cria o prefixo alvo (ex: "0000")

    console.log(`Iniciando minera√ß√£o... Dificuldade: ${difficulty} zeros.`);

    // Loop infinito at√© encontrar o nonce v√°lido
    while (true) {
        // Concatena os dados do bloco: transa√ß√µes + hash anterior + nonce
        const blockData = transactions + previousHash + nonce;

        // Gera o hash SHA-256 em hexadecimal
        const hash = crypto.createHash('sha256').update(blockData).digest('hex');

        // Verifica se o hash come√ßa com o prefixo alvo (ex: "0000")
        if (hash.startsWith(targetPrefix)) {
            console.log(`‚úÖ Bloco minerado! Nonce encontrado: ${nonce}`);
            console.log(`üîó Hash do bloco: ${hash}`);
            return { nonce, hash }; // Retorna o nonce e o hash
        }

        nonce++; // Incrementa o nonce para a pr√≥xima tentativa

        // Mostra progresso a cada 1 milh√£o de tentativas (opcional)
        if (nonce % 1000000 === 0) {
            console.log(`‚è≥ Testando nonce: ${nonce}...`);
        }
    }
}

// ===== Exemplo de Uso ===== //
const transactions = "Alice‚ÜíBob:10BTC,Charlie‚ÜíDave:5BTC"; // Dados das transa√ß√µes
const previousHash = "00000000000000000001a2b3c4d5e6f789"; // Hash do bloco anterior (exemplo)
const difficulty = 6; // Quantidade de zeros no in√≠cio do hash (dificuldade ajust√°vel)

// Executa a minera√ß√£o
const minedBlock = mineBlock(transactions, previousHash, difficulty);

/* Sa√≠da esperada (exemplo):
   Iniciando minera√ß√£o... Dificuldade: 4 zeros.
   ‚è≥ Testando nonce: 1000000...
   ‚è≥ Testando nonce: 2000000...
   ‚úÖ Bloco minerado! Nonce encontrado: 2345678
   üîó Hash do bloco: 0000a1b2c3d4e5f6...
*/